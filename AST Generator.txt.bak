AST Generation Rules (anything not stated here is an error):
	Root:
		Structure:
			1. Find KeyStruct token.
			2. Validate next token as Identifier, and use the token's word as the name of the structure.
			3. Create a StructDeclaration using the name and an empty StructMemberDeclaration list.
			4. Move the enumerator immediately past the openscope.
			5. Perform the below creation of StructureMemberDeclarations until we encounter a closescope.
				a. Enumerate and retrieve a whole statement. This statement should contain the entire member declaration.
				b. If the statement has two to three tokens (type, name, (opt.)semicolon), it is not a pointer member or the pointer asterisks are with either the type or the name.
					i. Check the first token for asterisks. If there are asterisks, create the proper DataType with name, size, and pointer level, and go to step d. Else, create a DataType at no pointer level.
					ii. Check the second token for asterisks. If there are asterisks, set the pointer level in the DataType. Else, this is not a pointer member.
				c. If the statement has three to four tokens (type, indeterminate, name, (opt.)semicolon), it is a pointer member. Create a DataType using the first token with a pointer level defined by the second token.
				d. Create a string set to the member's name.
				e. Create and return StructMemberDeclaration from these tokens.
			6. Package all StructMemberDeclarations into a List and return.
		
		Function:
			1. Find type token.
			2. If the type token contains asterisks, it is a function returning a pointer. Create and set the DataType as such. Else, continue to step 3.
			3. Read the next token. It is either one or more asterisks, or more commonly, an identifier, potentially with asterisks. Set the DataType's pointer level and create the function name as such.
			~. If the last token was just asterisks, the next token is the identifier.
			4. Move the enumerator over the openparen.
			5. Until we encounter a closeparen,
				a. Read a token. This is a type name with possible asterisks. Set the DataType as such.
				b. Read a token. This is either a set of one or more asterisks or an identifier, potentially with asterisks. Set the DataType's pointer level and create the argument name as such.
				~. If the last token was just asterisks, the next token is an identifier.
				c. Read a token. If it's a comma, skip over it. If it's a closeparen, continue to step d.
				d. Create a function argument with the created values and return it.
				=== OR ===
				a. Read a token. If it's an ellipsis, this is a variable length argument. Create the correct type and return it.
			6. Move over the openscope and set a depth level to 1.
			7. Until we find a closescope at depth 1...
				a. 