//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Documents\GitHub\Cix\antlrTest\Cix.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class CixParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, Integer=9, 
		FloatingPoint=10, Digit=11, HexDigit=12, StringPart=13, EscapeSequence=14, 
		UnicodeEscapeSequence=15, IdentifierFirstChar=16, IdentifierChar=17, Break=18, 
		Case=19, Continue=20, Default=21, Do=22, Double=23, Else=24, Float=25, 
		Global=26, For=27, If=28, Int=29, Long=30, Return=31, Short=32, Sizeof=33, 
		Struct=34, Void=35, While=36, LeftParen=37, RightParen=38, LeftBracket=39, 
		RightBracket=40, OpenScope=41, CloseScope=42, LessThan=43, LessThanOrEqualTo=44, 
		GreaterThan=45, GreaterThanOrEqualTo=46, ShiftLeft=47, ShiftRight=48, 
		Plus=49, Increment=50, Minus=51, Decrement=52, Asterisk=53, Divide=54, 
		Modulus=55, Ampersand=56, BitwiseOr=57, LogicalAnd=58, LogicalOr=59, BitwiseXor=60, 
		LogicalNot=61, BitwiseNot=62, Question=63, Colon=64, Semicolon=65, Comma=66, 
		Assign=67, MultiplyAssign=68, DivideAssign=69, ModulusAssign=70, AddAssign=71, 
		SubtractAssign=72, ShiftLeftAssign=73, ShiftRightAssign=74, BitwiseAndAssign=75, 
		BitwiseXorAssign=76, BitwiseOrAssign=77, Equals=78, NotEquals=79, PointerMemberAccess=80, 
		DirectMemberAccess=81, Identifier=82, Whitespace=83;
	public const int
		RULE_primaryExpression = 0, RULE_postfixExpression = 1, RULE_argumentExpressionList = 2, 
		RULE_unaryExpression = 3, RULE_unaryOperator = 4, RULE_castExpression = 5, 
		RULE_multiplicativeExpression = 6, RULE_additiveExpression = 7, RULE_shiftExpression = 8, 
		RULE_relationalExpression = 9, RULE_equalityExpression = 10, RULE_andExpression = 11, 
		RULE_exclusiveOrExpression = 12, RULE_inclusiveOrExpression = 13, RULE_logicalAndExpression = 14, 
		RULE_logicalOrExpression = 15, RULE_conditionalExpression = 16, RULE_assignmentExpression = 17, 
		RULE_assignmentOperator = 18, RULE_expression = 19, RULE_constantExpression = 20, 
		RULE_typeName = 21, RULE_funcptrTypeName = 22, RULE_typeNameList = 23, 
		RULE_primitiveType = 24, RULE_pointerAsteriskList = 25, RULE_variableDeclarationStatement = 26, 
		RULE_variableDeclarationWithInitializationStatement = 27, RULE_struct = 28, 
		RULE_structMember = 29, RULE_structArraySize = 30, RULE_globalVariableDeclaration = 31, 
		RULE_function = 32, RULE_functionParameterList = 33, RULE_functionParameter = 34, 
		RULE_statement = 35, RULE_block = 36, RULE_breakStatement = 37, RULE_conditionalStatement = 38, 
		RULE_continueStatement = 39, RULE_elseStatement = 40, RULE_doWhileStatement = 41, 
		RULE_expressionStatement = 42, RULE_forStatement = 43, RULE_returnStatement = 44, 
		RULE_switchStatement = 45, RULE_caseStatement = 46, RULE_literalCaseStatement = 47, 
		RULE_defaultCaseStatement = 48, RULE_whileStatement = 49, RULE_number = 50, 
		RULE_stringLiteral = 51, RULE_sourceFile = 52;
	public static readonly string[] ruleNames = {
		"primaryExpression", "postfixExpression", "argumentExpressionList", "unaryExpression", 
		"unaryOperator", "castExpression", "multiplicativeExpression", "additiveExpression", 
		"shiftExpression", "relationalExpression", "equalityExpression", "andExpression", 
		"exclusiveOrExpression", "inclusiveOrExpression", "logicalAndExpression", 
		"logicalOrExpression", "conditionalExpression", "assignmentExpression", 
		"assignmentOperator", "expression", "constantExpression", "typeName", 
		"funcptrTypeName", "typeNameList", "primitiveType", "pointerAsteriskList", 
		"variableDeclarationStatement", "variableDeclarationWithInitializationStatement", 
		"struct", "structMember", "structArraySize", "globalVariableDeclaration", 
		"function", "functionParameterList", "functionParameter", "statement", 
		"block", "breakStatement", "conditionalStatement", "continueStatement", 
		"elseStatement", "doWhileStatement", "expressionStatement", "forStatement", 
		"returnStatement", "switchStatement", "caseStatement", "literalCaseStatement", 
		"defaultCaseStatement", "whileStatement", "number", "stringLiteral", "sourceFile"
	};

	private static readonly string[] _LiteralNames = {
		null, "'@funcptr<'", "'byte'", "'sbyte'", "'ushort'", "'uint'", "'ulong'", 
		"'switch'", "'\"'", null, null, null, null, null, null, null, null, null, 
		"'break'", "'case'", "'continue'", "'default'", "'do'", "'double'", "'else'", 
		"'float'", "'global'", "'for'", "'if'", "'int'", "'long'", "'return'", 
		"'short'", "'sizeof'", "'struct'", "'void'", "'while'", "'('", "')'", 
		"'['", "']'", "'{'", "'}'", "'<'", "'<='", "'>'", "'>='", "'<<'", "'>>'", 
		"'+'", "'++'", "'-'", "'--'", "'*'", "'/'", "'%'", "'&'", "'|'", "'&&'", 
		"'||'", "'^'", "'!'", "'~'", "'?'", "':'", "';'", "','", "'='", "'*='", 
		"'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'&='", "'^='", "'|='", 
		"'=='", "'!='", "'->'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "Integer", "FloatingPoint", 
		"Digit", "HexDigit", "StringPart", "EscapeSequence", "UnicodeEscapeSequence", 
		"IdentifierFirstChar", "IdentifierChar", "Break", "Case", "Continue", 
		"Default", "Do", "Double", "Else", "Float", "Global", "For", "If", "Int", 
		"Long", "Return", "Short", "Sizeof", "Struct", "Void", "While", "LeftParen", 
		"RightParen", "LeftBracket", "RightBracket", "OpenScope", "CloseScope", 
		"LessThan", "LessThanOrEqualTo", "GreaterThan", "GreaterThanOrEqualTo", 
		"ShiftLeft", "ShiftRight", "Plus", "Increment", "Minus", "Decrement", 
		"Asterisk", "Divide", "Modulus", "Ampersand", "BitwiseOr", "LogicalAnd", 
		"LogicalOr", "BitwiseXor", "LogicalNot", "BitwiseNot", "Question", "Colon", 
		"Semicolon", "Comma", "Assign", "MultiplyAssign", "DivideAssign", "ModulusAssign", 
		"AddAssign", "SubtractAssign", "ShiftLeftAssign", "ShiftRightAssign", 
		"BitwiseAndAssign", "BitwiseXorAssign", "BitwiseOrAssign", "Equals", "NotEquals", 
		"PointerMemberAccess", "DirectMemberAccess", "Identifier", "Whitespace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Cix.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CixParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CixParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CixParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CixParser.Identifier, 0); }
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ITerminalNode LeftParen() { return GetToken(CixParser.LeftParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CixParser.RightParen, 0); }
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 0, RULE_primaryExpression);
		try {
			State = 113;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 106; Match(Identifier);
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 107; stringLiteral();
				}
				break;
			case Integer:
			case FloatingPoint:
				EnterOuterAlt(_localctx, 3);
				{
				State = 108; number();
				}
				break;
			case LeftParen:
				EnterOuterAlt(_localctx, 4);
				{
				State = 109; Match(LeftParen);
				State = 110; expression();
				State = 111; Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public ITerminalNode LeftBracket() { return GetToken(CixParser.LeftBracket, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightBracket() { return GetToken(CixParser.RightBracket, 0); }
		public ITerminalNode LeftParen() { return GetToken(CixParser.LeftParen, 0); }
		public ITerminalNode RightParen() { return GetToken(CixParser.RightParen, 0); }
		public ArgumentExpressionListContext argumentExpressionList() {
			return GetRuleContext<ArgumentExpressionListContext>(0);
		}
		public ITerminalNode DirectMemberAccess() { return GetToken(CixParser.DirectMemberAccess, 0); }
		public ITerminalNode Identifier() { return GetToken(CixParser.Identifier, 0); }
		public ITerminalNode PointerMemberAccess() { return GetToken(CixParser.PointerMemberAccess, 0); }
		public ITerminalNode Increment() { return GetToken(CixParser.Increment, 0); }
		public ITerminalNode Decrement() { return GetToken(CixParser.Decrement, 0); }
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		return postfixExpression(0);
	}

	private PostfixExpressionContext postfixExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, _parentState);
		PostfixExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_postfixExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 116; primaryExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 141;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 139;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 118;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 119; Match(LeftBracket);
						State = 120; expression();
						State = 121; Match(RightBracket);
						}
						break;
					case 2:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 123;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 124; Match(LeftParen);
						State = 126;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << Integer) | (1L << FloatingPoint) | (1L << Sizeof) | (1L << LeftParen) | (1L << Plus) | (1L << Increment) | (1L << Minus) | (1L << Decrement) | (1L << Asterisk) | (1L << Ampersand) | (1L << LogicalNot) | (1L << BitwiseNot))) != 0) || _la==Identifier) {
							{
							State = 125; argumentExpressionList(0);
							}
						}

						State = 128; Match(RightParen);
						}
						break;
					case 3:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 129;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 130; Match(DirectMemberAccess);
						State = 131; Match(Identifier);
						}
						break;
					case 4:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 132;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 133; Match(PointerMemberAccess);
						State = 134; Match(Identifier);
						}
						break;
					case 5:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 135;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 136; Match(Increment);
						}
						break;
					case 6:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 137;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 138; Match(Decrement);
						}
						break;
					}
					} 
				}
				State = 143;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgumentExpressionListContext : ParserRuleContext {
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ArgumentExpressionListContext argumentExpressionList() {
			return GetRuleContext<ArgumentExpressionListContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CixParser.Comma, 0); }
		public ArgumentExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentExpressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterArgumentExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitArgumentExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentExpressionListContext argumentExpressionList() {
		return argumentExpressionList(0);
	}

	private ArgumentExpressionListContext argumentExpressionList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ArgumentExpressionListContext _localctx = new ArgumentExpressionListContext(Context, _parentState);
		ArgumentExpressionListContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_argumentExpressionList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 145; assignmentExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 152;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ArgumentExpressionListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_argumentExpressionList);
					State = 147;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 148; Match(Comma);
					State = 149; assignmentExpression();
					}
					} 
				}
				State = 154;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public ITerminalNode Increment() { return GetToken(CixParser.Increment, 0); }
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public ITerminalNode Decrement() { return GetToken(CixParser.Decrement, 0); }
		public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public ITerminalNode Sizeof() { return GetToken(CixParser.Sizeof, 0); }
		public ITerminalNode LeftParen() { return GetToken(CixParser.LeftParen, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CixParser.RightParen, 0); }
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_unaryExpression);
		try {
			State = 170;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 155; postfixExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 156; Match(Increment);
				State = 157; unaryExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 158; Match(Decrement);
				State = 159; unaryExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 160; unaryOperator();
				State = 161; castExpression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 163; Match(Sizeof);
				State = 164; unaryExpression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 165; Match(Sizeof);
				State = 166; Match(LeftParen);
				State = 167; typeName();
				State = 168; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		public ITerminalNode Ampersand() { return GetToken(CixParser.Ampersand, 0); }
		public ITerminalNode Asterisk() { return GetToken(CixParser.Asterisk, 0); }
		public ITerminalNode Plus() { return GetToken(CixParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(CixParser.Minus, 0); }
		public ITerminalNode BitwiseNot() { return GetToken(CixParser.BitwiseNot, 0); }
		public ITerminalNode LogicalNot() { return GetToken(CixParser.LogicalNot, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterUnaryOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitUnaryOperator(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 8, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Plus) | (1L << Minus) | (1L << Asterisk) | (1L << Ampersand) | (1L << LogicalNot) | (1L << BitwiseNot))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		public ITerminalNode LeftParen() { return GetToken(CixParser.LeftParen, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CixParser.RightParen, 0); }
		public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
	}

	[RuleVersion(0)]
	public CastExpressionContext castExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_castExpression);
		try {
			State = 180;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 174; Match(LeftParen);
				State = 175; typeName();
				State = 176; Match(RightParen);
				State = 177; castExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 179; unaryExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public ITerminalNode Asterisk() { return GetToken(CixParser.Asterisk, 0); }
		public ITerminalNode Divide() { return GetToken(CixParser.Divide, 0); }
		public ITerminalNode Modulus() { return GetToken(CixParser.Modulus, 0); }
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		return multiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext multiplicativeExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_multiplicativeExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 183; castExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 196;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 194;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 185;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 186; Match(Asterisk);
						State = 187; castExpression();
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 188;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 189; Match(Divide);
						State = 190; castExpression();
						}
						break;
					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 191;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 192; Match(Modulus);
						State = 193; castExpression();
						}
						break;
					}
					} 
				}
				State = 198;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public ITerminalNode Plus() { return GetToken(CixParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(CixParser.Minus, 0); }
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		return additiveExpression(0);
	}

	private AdditiveExpressionContext additiveExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_additiveExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 200; multiplicativeExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 210;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 208;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
					case 1:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 202;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 203; Match(Plus);
						State = 204; multiplicativeExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 205;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 206; Match(Minus);
						State = 207; multiplicativeExpression(0);
						}
						break;
					}
					} 
				}
				State = 212;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ShiftExpressionContext : ParserRuleContext {
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		public ITerminalNode ShiftLeft() { return GetToken(CixParser.ShiftLeft, 0); }
		public ITerminalNode ShiftRight() { return GetToken(CixParser.ShiftRight, 0); }
		public ShiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExpressionContext shiftExpression() {
		return shiftExpression(0);
	}

	private ShiftExpressionContext shiftExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ShiftExpressionContext _localctx = new ShiftExpressionContext(Context, _parentState);
		ShiftExpressionContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_shiftExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 214; additiveExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 224;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 222;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new ShiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 216;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 217; Match(ShiftLeft);
						State = 218; additiveExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new ShiftExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
						State = 219;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 220; Match(ShiftRight);
						State = 221; additiveExpression(0);
						}
						break;
					}
					} 
				}
				State = 226;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public ITerminalNode LessThan() { return GetToken(CixParser.LessThan, 0); }
		public ITerminalNode GreaterThan() { return GetToken(CixParser.GreaterThan, 0); }
		public ITerminalNode LessThanOrEqualTo() { return GetToken(CixParser.LessThanOrEqualTo, 0); }
		public ITerminalNode GreaterThanOrEqualTo() { return GetToken(CixParser.GreaterThanOrEqualTo, 0); }
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		return relationalExpression(0);
	}

	private RelationalExpressionContext relationalExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, _parentState);
		RelationalExpressionContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_relationalExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 228; shiftExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 244;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 242;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 230;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 231; Match(LessThan);
						State = 232; shiftExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 233;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 234; Match(GreaterThan);
						State = 235; shiftExpression(0);
						}
						break;
					case 3:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 236;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 237; Match(LessThanOrEqualTo);
						State = 238; shiftExpression(0);
						}
						break;
					case 4:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 239;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 240; Match(GreaterThanOrEqualTo);
						State = 241; shiftExpression(0);
						}
						break;
					}
					} 
				}
				State = 246;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public ITerminalNode Equals() { return GetToken(CixParser.Equals, 0); }
		public ITerminalNode NotEquals() { return GetToken(CixParser.NotEquals, 0); }
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		return equalityExpression(0);
	}

	private EqualityExpressionContext equalityExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, _parentState);
		EqualityExpressionContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_equalityExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 248; relationalExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 258;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 256;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
					case 1:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 250;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 251; Match(Equals);
						State = 252; relationalExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 253;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 254; Match(NotEquals);
						State = 255; relationalExpression(0);
						}
						break;
					}
					} 
				}
				State = 260;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public ITerminalNode Ampersand() { return GetToken(CixParser.Ampersand, 0); }
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		return andExpression(0);
	}

	private AndExpressionContext andExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AndExpressionContext _localctx = new AndExpressionContext(Context, _parentState);
		AndExpressionContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_andExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 262; equalityExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 269;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_andExpression);
					State = 264;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 265; Match(Ampersand);
					State = 266; equalityExpression(0);
					}
					} 
				}
				State = 271;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExclusiveOrExpressionContext : ParserRuleContext {
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public ITerminalNode BitwiseXor() { return GetToken(CixParser.BitwiseXor, 0); }
		public ExclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterExclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitExclusiveOrExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveOrExpressionContext exclusiveOrExpression() {
		return exclusiveOrExpression(0);
	}

	private ExclusiveOrExpressionContext exclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExclusiveOrExpressionContext _localctx = new ExclusiveOrExpressionContext(Context, _parentState);
		ExclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_exclusiveOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 273; andExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 280;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExclusiveOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_exclusiveOrExpression);
					State = 275;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 276; Match(BitwiseXor);
					State = 277; andExpression(0);
					}
					} 
				}
				State = 282;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InclusiveOrExpressionContext : ParserRuleContext {
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public ITerminalNode BitwiseOr() { return GetToken(CixParser.BitwiseOr, 0); }
		public InclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterInclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitInclusiveOrExpression(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveOrExpressionContext inclusiveOrExpression() {
		return inclusiveOrExpression(0);
	}

	private InclusiveOrExpressionContext inclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InclusiveOrExpressionContext _localctx = new InclusiveOrExpressionContext(Context, _parentState);
		InclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_inclusiveOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 284; exclusiveOrExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 291;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InclusiveOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_inclusiveOrExpression);
					State = 286;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 287; Match(BitwiseOr);
					State = 288; exclusiveOrExpression(0);
					}
					} 
				}
				State = 293;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalAndExpressionContext : ParserRuleContext {
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public LogicalAndExpressionContext logicalAndExpression() {
			return GetRuleContext<LogicalAndExpressionContext>(0);
		}
		public ITerminalNode LogicalAnd() { return GetToken(CixParser.LogicalAnd, 0); }
		public LogicalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAndExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
	}

	[RuleVersion(0)]
	public LogicalAndExpressionContext logicalAndExpression() {
		return logicalAndExpression(0);
	}

	private LogicalAndExpressionContext logicalAndExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalAndExpressionContext _localctx = new LogicalAndExpressionContext(Context, _parentState);
		LogicalAndExpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_logicalAndExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 295; inclusiveOrExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 302;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalAndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logicalAndExpression);
					State = 297;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 298; Match(LogicalAnd);
					State = 299; inclusiveOrExpression(0);
					}
					} 
				}
				State = 304;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalOrExpressionContext : ParserRuleContext {
		public LogicalAndExpressionContext logicalAndExpression() {
			return GetRuleContext<LogicalAndExpressionContext>(0);
		}
		public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		public ITerminalNode LogicalOr() { return GetToken(CixParser.LogicalOr, 0); }
		public LogicalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOrExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOrExpressionContext logicalOrExpression() {
		return logicalOrExpression(0);
	}

	private LogicalOrExpressionContext logicalOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalOrExpressionContext _localctx = new LogicalOrExpressionContext(Context, _parentState);
		LogicalOrExpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_logicalOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 306; logicalAndExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 313;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logicalOrExpression);
					State = 308;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 309; Match(LogicalOr);
					State = 310; logicalAndExpression(0);
					}
					} 
				}
				State = 315;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		public ITerminalNode Question() { return GetToken(CixParser.Question, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(CixParser.Colon, 0); }
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_conditionalExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316; logicalOrExpression(0);
			State = 322;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 317; Match(Question);
				State = 318; expression();
				State = 319; Match(Colon);
				State = 320; conditionalExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_assignmentExpression);
		try {
			State = 329;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 324; conditionalExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 325; unaryExpression();
				State = 326; assignmentOperator();
				State = 327; assignmentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public ITerminalNode Assign() { return GetToken(CixParser.Assign, 0); }
		public ITerminalNode MultiplyAssign() { return GetToken(CixParser.MultiplyAssign, 0); }
		public ITerminalNode DivideAssign() { return GetToken(CixParser.DivideAssign, 0); }
		public ITerminalNode ModulusAssign() { return GetToken(CixParser.ModulusAssign, 0); }
		public ITerminalNode AddAssign() { return GetToken(CixParser.AddAssign, 0); }
		public ITerminalNode SubtractAssign() { return GetToken(CixParser.SubtractAssign, 0); }
		public ITerminalNode ShiftLeftAssign() { return GetToken(CixParser.ShiftLeftAssign, 0); }
		public ITerminalNode ShiftRightAssign() { return GetToken(CixParser.ShiftRightAssign, 0); }
		public ITerminalNode BitwiseAndAssign() { return GetToken(CixParser.BitwiseAndAssign, 0); }
		public ITerminalNode BitwiseXorAssign() { return GetToken(CixParser.BitwiseXorAssign, 0); }
		public ITerminalNode BitwiseOrAssign() { return GetToken(CixParser.BitwiseOrAssign, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 36, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (Assign - 67)) | (1L << (MultiplyAssign - 67)) | (1L << (DivideAssign - 67)) | (1L << (ModulusAssign - 67)) | (1L << (AddAssign - 67)) | (1L << (SubtractAssign - 67)) | (1L << (ShiftLeftAssign - 67)) | (1L << (ShiftRightAssign - 67)) | (1L << (BitwiseAndAssign - 67)) | (1L << (BitwiseXorAssign - 67)) | (1L << (BitwiseOrAssign - 67)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333; assignmentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_constantExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335; conditionalExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CixParser.Identifier, 0); }
		public PointerAsteriskListContext pointerAsteriskList() {
			return GetRuleContext<PointerAsteriskListContext>(0);
		}
		public FuncptrTypeNameContext funcptrTypeName() {
			return GetRuleContext<FuncptrTypeNameContext>(0);
		}
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 42, RULE_typeName);
		int _la;
		try {
			State = 349;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 337; Match(Identifier);
				State = 339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Asterisk) {
					{
					State = 338; pointerAsteriskList();
					}
				}

				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 341; funcptrTypeName();
				State = 343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Asterisk) {
					{
					State = 342; pointerAsteriskList();
					}
				}

				}
				break;
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case Double:
			case Float:
			case Int:
			case Long:
			case Short:
			case Void:
				EnterOuterAlt(_localctx, 3);
				{
				State = 345; primitiveType();
				State = 347;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Asterisk) {
					{
					State = 346; pointerAsteriskList();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncptrTypeNameContext : ParserRuleContext {
		public TypeNameListContext typeNameList() {
			return GetRuleContext<TypeNameListContext>(0);
		}
		public ITerminalNode GreaterThan() { return GetToken(CixParser.GreaterThan, 0); }
		public FuncptrTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcptrTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterFuncptrTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitFuncptrTypeName(this);
		}
	}

	[RuleVersion(0)]
	public FuncptrTypeNameContext funcptrTypeName() {
		FuncptrTypeNameContext _localctx = new FuncptrTypeNameContext(Context, State);
		EnterRule(_localctx, 44, RULE_funcptrTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351; Match(T__0);
			State = 352; typeNameList();
			State = 353; Match(GreaterThan);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameListContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CixParser.Comma, 0); }
		public TypeNameListContext typeNameList() {
			return GetRuleContext<TypeNameListContext>(0);
		}
		public TypeNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeNameList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterTypeNameList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitTypeNameList(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameListContext typeNameList() {
		TypeNameListContext _localctx = new TypeNameListContext(Context, State);
		EnterRule(_localctx, 46, RULE_typeNameList);
		try {
			State = 360;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 355; typeName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 356; typeName();
				State = 357; Match(Comma);
				State = 358; typeNameList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode Void() { return GetToken(CixParser.Void, 0); }
		public ITerminalNode Short() { return GetToken(CixParser.Short, 0); }
		public ITerminalNode Int() { return GetToken(CixParser.Int, 0); }
		public ITerminalNode Long() { return GetToken(CixParser.Long, 0); }
		public ITerminalNode Float() { return GetToken(CixParser.Float, 0); }
		public ITerminalNode Double() { return GetToken(CixParser.Double, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 48, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << Double) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << Void))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerAsteriskListContext : ParserRuleContext {
		public ITerminalNode Asterisk() { return GetToken(CixParser.Asterisk, 0); }
		public PointerAsteriskListContext pointerAsteriskList() {
			return GetRuleContext<PointerAsteriskListContext>(0);
		}
		public PointerAsteriskListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerAsteriskList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterPointerAsteriskList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitPointerAsteriskList(this);
		}
	}

	[RuleVersion(0)]
	public PointerAsteriskListContext pointerAsteriskList() {
		PointerAsteriskListContext _localctx = new PointerAsteriskListContext(Context, State);
		EnterRule(_localctx, 50, RULE_pointerAsteriskList);
		try {
			State = 367;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 364; Match(Asterisk);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 365; Match(Asterisk);
				State = 366; pointerAsteriskList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationStatementContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CixParser.Identifier, 0); }
		public ITerminalNode Semicolon() { return GetToken(CixParser.Semicolon, 0); }
		public VariableDeclarationWithInitializationStatementContext variableDeclarationWithInitializationStatement() {
			return GetRuleContext<VariableDeclarationWithInitializationStatementContext>(0);
		}
		public VariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationStatementContext variableDeclarationStatement() {
		VariableDeclarationStatementContext _localctx = new VariableDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_variableDeclarationStatement);
		try {
			State = 376;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 369; typeName();
				State = 370; Match(Identifier);
				State = 371; Match(Semicolon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 373; variableDeclarationWithInitializationStatement();
				State = 374; Match(Semicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationWithInitializationStatementContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CixParser.Identifier, 0); }
		public ITerminalNode Assign() { return GetToken(CixParser.Assign, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Semicolon() { return GetToken(CixParser.Semicolon, 0); }
		public VariableDeclarationWithInitializationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationWithInitializationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationWithInitializationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationWithInitializationStatement(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationWithInitializationStatementContext variableDeclarationWithInitializationStatement() {
		VariableDeclarationWithInitializationStatementContext _localctx = new VariableDeclarationWithInitializationStatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_variableDeclarationWithInitializationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378; typeName();
			State = 379; Match(Identifier);
			State = 380; Match(Assign);
			State = 381; expression();
			State = 382; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructContext : ParserRuleContext {
		public ITerminalNode Struct() { return GetToken(CixParser.Struct, 0); }
		public ITerminalNode Identifier() { return GetToken(CixParser.Identifier, 0); }
		public ITerminalNode OpenScope() { return GetToken(CixParser.OpenScope, 0); }
		public ITerminalNode CloseScope() { return GetToken(CixParser.CloseScope, 0); }
		public StructMemberContext[] structMember() {
			return GetRuleContexts<StructMemberContext>();
		}
		public StructMemberContext structMember(int i) {
			return GetRuleContext<StructMemberContext>(i);
		}
		public StructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterStruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitStruct(this);
		}
	}

	[RuleVersion(0)]
	public StructContext @struct() {
		StructContext _localctx = new StructContext(Context, State);
		EnterRule(_localctx, 56, RULE_struct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384; Match(Struct);
			State = 385; Match(Identifier);
			State = 386; Match(OpenScope);
			State = 388;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 387; structMember();
				}
				}
				State = 390;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << Double) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << Void))) != 0) || _la==Identifier );
			State = 392; Match(CloseScope);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructMemberContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CixParser.Identifier, 0); }
		public ITerminalNode Semicolon() { return GetToken(CixParser.Semicolon, 0); }
		public StructArraySizeContext structArraySize() {
			return GetRuleContext<StructArraySizeContext>(0);
		}
		public StructMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterStructMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitStructMember(this);
		}
	}

	[RuleVersion(0)]
	public StructMemberContext structMember() {
		StructMemberContext _localctx = new StructMemberContext(Context, State);
		EnterRule(_localctx, 58, RULE_structMember);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394; typeName();
			State = 395; Match(Identifier);
			State = 397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftBracket) {
				{
				State = 396; structArraySize();
				}
			}

			State = 399; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructArraySizeContext : ParserRuleContext {
		public ITerminalNode LeftBracket() { return GetToken(CixParser.LeftBracket, 0); }
		public ITerminalNode Integer() { return GetToken(CixParser.Integer, 0); }
		public ITerminalNode RightBracket() { return GetToken(CixParser.RightBracket, 0); }
		public StructArraySizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structArraySize; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterStructArraySize(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitStructArraySize(this);
		}
	}

	[RuleVersion(0)]
	public StructArraySizeContext structArraySize() {
		StructArraySizeContext _localctx = new StructArraySizeContext(Context, State);
		EnterRule(_localctx, 60, RULE_structArraySize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401; Match(LeftBracket);
			State = 402; Match(Integer);
			State = 403; Match(RightBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVariableDeclarationContext : ParserRuleContext {
		public ITerminalNode Global() { return GetToken(CixParser.Global, 0); }
		public VariableDeclarationStatementContext variableDeclarationStatement() {
			return GetRuleContext<VariableDeclarationStatementContext>(0);
		}
		public VariableDeclarationWithInitializationStatementContext variableDeclarationWithInitializationStatement() {
			return GetRuleContext<VariableDeclarationWithInitializationStatementContext>(0);
		}
		public GlobalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterGlobalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitGlobalVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVariableDeclarationContext globalVariableDeclaration() {
		GlobalVariableDeclarationContext _localctx = new GlobalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 62, RULE_globalVariableDeclaration);
		try {
			State = 409;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 405; Match(Global);
				State = 406; variableDeclarationStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 407; Match(Global);
				State = 408; variableDeclarationWithInitializationStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CixParser.Identifier, 0); }
		public ITerminalNode LeftParen() { return GetToken(CixParser.LeftParen, 0); }
		public ITerminalNode RightParen() { return GetToken(CixParser.RightParen, 0); }
		public ITerminalNode OpenScope() { return GetToken(CixParser.OpenScope, 0); }
		public ITerminalNode CloseScope() { return GetToken(CixParser.CloseScope, 0); }
		public FunctionParameterListContext functionParameterList() {
			return GetRuleContext<FunctionParameterListContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 64, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411; typeName();
			State = 412; Match(Identifier);
			State = 413; Match(LeftParen);
			State = 415;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << Double) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << Void))) != 0) || _la==Identifier) {
				{
				State = 414; functionParameterList();
				}
			}

			State = 417; Match(RightParen);
			State = 418; Match(OpenScope);
			State = 422;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << Integer) | (1L << FloatingPoint) | (1L << Break) | (1L << Continue) | (1L << Do) | (1L << Double) | (1L << Float) | (1L << For) | (1L << If) | (1L << Int) | (1L << Long) | (1L << Return) | (1L << Short) | (1L << Sizeof) | (1L << Void) | (1L << While) | (1L << LeftParen) | (1L << OpenScope) | (1L << Plus) | (1L << Increment) | (1L << Minus) | (1L << Decrement) | (1L << Asterisk) | (1L << Ampersand) | (1L << LogicalNot) | (1L << BitwiseNot))) != 0) || _la==Identifier) {
				{
				{
				State = 419; statement();
				}
				}
				State = 424;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 425; Match(CloseScope);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterListContext : ParserRuleContext {
		public FunctionParameterContext functionParameter() {
			return GetRuleContext<FunctionParameterContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CixParser.Comma, 0); }
		public FunctionParameterListContext functionParameterList() {
			return GetRuleContext<FunctionParameterListContext>(0);
		}
		public FunctionParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterFunctionParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitFunctionParameterList(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterListContext functionParameterList() {
		FunctionParameterListContext _localctx = new FunctionParameterListContext(Context, State);
		EnterRule(_localctx, 66, RULE_functionParameterList);
		try {
			State = 432;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 427; functionParameter();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 428; functionParameter();
				State = 429; Match(Comma);
				State = 430; functionParameterList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CixParser.Identifier, 0); }
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterFunctionParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitFunctionParameter(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 68, RULE_functionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 434; typeName();
			State = 435; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		public ConditionalStatementContext conditionalStatement() {
			return GetRuleContext<ConditionalStatementContext>(0);
		}
		public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public DoWhileStatementContext doWhileStatement() {
			return GetRuleContext<DoWhileStatementContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public VariableDeclarationStatementContext variableDeclarationStatement() {
			return GetRuleContext<VariableDeclarationStatementContext>(0);
		}
		public VariableDeclarationWithInitializationStatementContext variableDeclarationWithInitializationStatement() {
			return GetRuleContext<VariableDeclarationWithInitializationStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_statement);
		try {
			State = 449;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 437; block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 438; breakStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 439; conditionalStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 440; continueStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 441; doWhileStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 442; expressionStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 443; forStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 444; returnStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 445; switchStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 446; variableDeclarationStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 447; variableDeclarationWithInitializationStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 448; whileStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode OpenScope() { return GetToken(CixParser.OpenScope, 0); }
		public ITerminalNode CloseScope() { return GetToken(CixParser.CloseScope, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 72, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451; Match(OpenScope);
			State = 455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << Integer) | (1L << FloatingPoint) | (1L << Break) | (1L << Continue) | (1L << Do) | (1L << Double) | (1L << Float) | (1L << For) | (1L << If) | (1L << Int) | (1L << Long) | (1L << Return) | (1L << Short) | (1L << Sizeof) | (1L << Void) | (1L << While) | (1L << LeftParen) | (1L << OpenScope) | (1L << Plus) | (1L << Increment) | (1L << Minus) | (1L << Decrement) | (1L << Asterisk) | (1L << Ampersand) | (1L << LogicalNot) | (1L << BitwiseNot))) != 0) || _la==Identifier) {
				{
				{
				State = 452; statement();
				}
				}
				State = 457;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 458; Match(CloseScope);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		public ITerminalNode Break() { return GetToken(CixParser.Break, 0); }
		public ITerminalNode Semicolon() { return GetToken(CixParser.Semicolon, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 74, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460; Match(Break);
			State = 461; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalStatementContext : ParserRuleContext {
		public ITerminalNode If() { return GetToken(CixParser.If, 0); }
		public ITerminalNode LeftParen() { return GetToken(CixParser.LeftParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CixParser.RightParen, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public ConditionalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterConditionalStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitConditionalStatement(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalStatementContext conditionalStatement() {
		ConditionalStatementContext _localctx = new ConditionalStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_conditionalStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463; Match(If);
			State = 464; Match(LeftParen);
			State = 465; expression();
			State = 466; Match(RightParen);
			State = 467; statement();
			State = 469;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 468; elseStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		public ITerminalNode Continue() { return GetToken(CixParser.Continue, 0); }
		public ITerminalNode Semicolon() { return GetToken(CixParser.Semicolon, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471; Match(Continue);
			State = 472; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public ITerminalNode Else() { return GetToken(CixParser.Else, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474; Match(Else);
			State = 475; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileStatementContext : ParserRuleContext {
		public ITerminalNode Do() { return GetToken(CixParser.Do, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode While() { return GetToken(CixParser.While, 0); }
		public ITerminalNode LeftParen() { return GetToken(CixParser.LeftParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CixParser.RightParen, 0); }
		public ITerminalNode Semicolon() { return GetToken(CixParser.Semicolon, 0); }
		public DoWhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterDoWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitDoWhileStatement(this);
		}
	}

	[RuleVersion(0)]
	public DoWhileStatementContext doWhileStatement() {
		DoWhileStatementContext _localctx = new DoWhileStatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_doWhileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477; Match(Do);
			State = 478; statement();
			State = 479; Match(While);
			State = 480; Match(LeftParen);
			State = 481; expression();
			State = 482; Match(RightParen);
			State = 483; Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 84, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ITerminalNode For() { return GetToken(CixParser.For, 0); }
		public ITerminalNode LeftParen() { return GetToken(CixParser.LeftParen, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] Semicolon() { return GetTokens(CixParser.Semicolon); }
		public ITerminalNode Semicolon(int i) {
			return GetToken(CixParser.Semicolon, i);
		}
		public ITerminalNode RightParen() { return GetToken(CixParser.RightParen, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 86, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487; Match(For);
			State = 488; Match(LeftParen);
			State = 489; expression();
			State = 490; Match(Semicolon);
			State = 491; expression();
			State = 492; Match(Semicolon);
			State = 493; expression();
			State = 494; Match(Semicolon);
			State = 495; Match(RightParen);
			State = 496; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode Return() { return GetToken(CixParser.Return, 0); }
		public ITerminalNode Semicolon() { return GetToken(CixParser.Semicolon, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 88, RULE_returnStatement);
		try {
			State = 504;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 498; Match(Return);
				State = 499; Match(Semicolon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 500; Match(Return);
				State = 501; expression();
				State = 502; Match(Semicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public ITerminalNode LeftParen() { return GetToken(CixParser.LeftParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CixParser.RightParen, 0); }
		public ITerminalNode OpenScope() { return GetToken(CixParser.OpenScope, 0); }
		public ITerminalNode CloseScope() { return GetToken(CixParser.CloseScope, 0); }
		public CaseStatementContext[] caseStatement() {
			return GetRuleContexts<CaseStatementContext>();
		}
		public CaseStatementContext caseStatement(int i) {
			return GetRuleContext<CaseStatementContext>(i);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 90, RULE_switchStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 506; Match(T__6);
			State = 507; Match(LeftParen);
			State = 508; expression();
			State = 509; Match(RightParen);
			State = 510; Match(OpenScope);
			State = 512;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 511; caseStatement();
				}
				}
				State = 514;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Case || _la==Default );
			State = 516; Match(CloseScope);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		public LiteralCaseStatementContext literalCaseStatement() {
			return GetRuleContext<LiteralCaseStatementContext>(0);
		}
		public DefaultCaseStatementContext defaultCaseStatement() {
			return GetRuleContext<DefaultCaseStatementContext>(0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 92, RULE_caseStatement);
		try {
			State = 520;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Case:
				EnterOuterAlt(_localctx, 1);
				{
				State = 518; literalCaseStatement();
				}
				break;
			case Default:
				EnterOuterAlt(_localctx, 2);
				{
				State = 519; defaultCaseStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralCaseStatementContext : ParserRuleContext {
		public ITerminalNode Case() { return GetToken(CixParser.Case, 0); }
		public ITerminalNode Integer() { return GetToken(CixParser.Integer, 0); }
		public ITerminalNode Colon() { return GetToken(CixParser.Colon, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public LiteralCaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalCaseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterLiteralCaseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitLiteralCaseStatement(this);
		}
	}

	[RuleVersion(0)]
	public LiteralCaseStatementContext literalCaseStatement() {
		LiteralCaseStatementContext _localctx = new LiteralCaseStatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_literalCaseStatement);
		try {
			State = 531;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 522; Match(Case);
				State = 523; Match(Integer);
				State = 524; Match(Colon);
				State = 525; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 526; Match(Case);
				State = 527; stringLiteral();
				State = 528; Match(Colon);
				State = 529; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultCaseStatementContext : ParserRuleContext {
		public ITerminalNode Default() { return GetToken(CixParser.Default, 0); }
		public ITerminalNode Colon() { return GetToken(CixParser.Colon, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public DefaultCaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultCaseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterDefaultCaseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitDefaultCaseStatement(this);
		}
	}

	[RuleVersion(0)]
	public DefaultCaseStatementContext defaultCaseStatement() {
		DefaultCaseStatementContext _localctx = new DefaultCaseStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_defaultCaseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533; Match(Default);
			State = 534; Match(Colon);
			State = 535; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ITerminalNode While() { return GetToken(CixParser.While, 0); }
		public ITerminalNode LeftParen() { return GetToken(CixParser.LeftParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CixParser.RightParen, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537; Match(While);
			State = 538; Match(LeftParen);
			State = 539; expression();
			State = 540; Match(RightParen);
			State = 541; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode Integer() { return GetToken(CixParser.Integer, 0); }
		public ITerminalNode FloatingPoint() { return GetToken(CixParser.FloatingPoint, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 100, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 543;
			_la = TokenStream.LA(1);
			if ( !(_la==Integer || _la==FloatingPoint) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public ITerminalNode[] StringPart() { return GetTokens(CixParser.StringPart); }
		public ITerminalNode StringPart(int i) {
			return GetToken(CixParser.StringPart, i);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 102, RULE_stringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545; Match(T__7);
			State = 549;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==StringPart) {
				{
				{
				State = 546; Match(StringPart);
				}
				}
				State = 551;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 552; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceFileContext : ParserRuleContext {
		public StructContext[] @struct() {
			return GetRuleContexts<StructContext>();
		}
		public StructContext @struct(int i) {
			return GetRuleContext<StructContext>(i);
		}
		public GlobalVariableDeclarationContext[] globalVariableDeclaration() {
			return GetRuleContexts<GlobalVariableDeclarationContext>();
		}
		public GlobalVariableDeclarationContext globalVariableDeclaration(int i) {
			return GetRuleContext<GlobalVariableDeclarationContext>(i);
		}
		public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		public SourceFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceFile; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.EnterSourceFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICixListener typedListener = listener as ICixListener;
			if (typedListener != null) typedListener.ExitSourceFile(this);
		}
	}

	[RuleVersion(0)]
	public SourceFileContext sourceFile() {
		SourceFileContext _localctx = new SourceFileContext(Context, State);
		EnterRule(_localctx, 104, RULE_sourceFile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 557;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Struct:
					{
					State = 554; @struct();
					}
					break;
				case Global:
					{
					State = 555; globalVariableDeclaration();
					}
					break;
				case T__0:
				case T__1:
				case T__2:
				case T__3:
				case T__4:
				case T__5:
				case Double:
				case Float:
				case Int:
				case Long:
				case Short:
				case Void:
				case Identifier:
					{
					State = 556; function();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 559;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << Double) | (1L << Float) | (1L << Global) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << Struct) | (1L << Void))) != 0) || _la==Identifier );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return postfixExpression_sempred((PostfixExpressionContext)_localctx, predIndex);
		case 2: return argumentExpressionList_sempred((ArgumentExpressionListContext)_localctx, predIndex);
		case 6: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);
		case 7: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);
		case 8: return shiftExpression_sempred((ShiftExpressionContext)_localctx, predIndex);
		case 9: return relationalExpression_sempred((RelationalExpressionContext)_localctx, predIndex);
		case 10: return equalityExpression_sempred((EqualityExpressionContext)_localctx, predIndex);
		case 11: return andExpression_sempred((AndExpressionContext)_localctx, predIndex);
		case 12: return exclusiveOrExpression_sempred((ExclusiveOrExpressionContext)_localctx, predIndex);
		case 13: return inclusiveOrExpression_sempred((InclusiveOrExpressionContext)_localctx, predIndex);
		case 14: return logicalAndExpression_sempred((LogicalAndExpressionContext)_localctx, predIndex);
		case 15: return logicalOrExpression_sempred((LogicalOrExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool postfixExpression_sempred(PostfixExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool argumentExpressionList_sempred(ArgumentExpressionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 3);
		case 8: return Precpred(Context, 2);
		case 9: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 2);
		case 11: return Precpred(Context, 1);
		}
		return true;
	}
	private bool shiftExpression_sempred(ShiftExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(Context, 2);
		case 13: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relationalExpression_sempred(RelationalExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return Precpred(Context, 4);
		case 15: return Precpred(Context, 3);
		case 16: return Precpred(Context, 2);
		case 17: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equalityExpression_sempred(EqualityExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return Precpred(Context, 2);
		case 19: return Precpred(Context, 1);
		}
		return true;
	}
	private bool andExpression_sempred(AndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20: return Precpred(Context, 1);
		}
		return true;
	}
	private bool exclusiveOrExpression_sempred(ExclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21: return Precpred(Context, 1);
		}
		return true;
	}
	private bool inclusiveOrExpression_sempred(InclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalAndExpression_sempred(LogicalAndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalOrExpression_sempred(LogicalOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'U', '\x234', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x5', '\x2', 't', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'\x81', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x8E', '\n', '\x3', '\f', 
		'\x3', '\xE', '\x3', '\x91', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x99', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x9C', '\v', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\xAD', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xB7', 
		'\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\a', '\b', '\xC5', '\n', '\b', '\f', '\b', 
		'\xE', '\b', '\xC8', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\a', '\t', '\xD3', '\n', '\t', '\f', '\t', '\xE', '\t', '\xD6', 
		'\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', 
		'\xE1', '\n', '\n', '\f', '\n', '\xE', '\n', '\xE4', '\v', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\xF5', '\n', 
		'\v', '\f', '\v', '\xE', '\v', '\xF8', '\v', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\a', '\f', '\x103', '\n', '\f', '\f', '\f', 
		'\xE', '\f', '\x106', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\x10E', '\n', '\r', 
		'\f', '\r', '\xE', '\r', '\x111', '\v', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x119', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x11C', '\v', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\a', '\xF', '\x124', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x127', 
		'\v', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x12F', '\n', '\x10', '\f', 
		'\x10', '\xE', '\x10', '\x132', '\v', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', 
		'\x13A', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x13D', '\v', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x5', '\x12', '\x145', '\n', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x14C', 
		'\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', 
		'\x156', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x15A', 
		'\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x15E', '\n', 
		'\x17', '\x5', '\x17', '\x160', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x16B', '\n', '\x19', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', 
		'\x1B', '\x172', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', 
		'\x17B', '\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x6', '\x1E', '\x187', '\n', '\x1E', '\r', '\x1E', 
		'\xE', '\x1E', '\x188', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x190', '\n', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\x5', '!', '\x19C', '\n', '!', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x1A2', 
		'\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\a', '\"', '\x1A7', 
		'\n', '\"', '\f', '\"', '\xE', '\"', '\x1AA', '\v', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x5', '#', '\x1B3', '\n', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x5', 
		'%', '\x1C4', '\n', '%', '\x3', '&', '\x3', '&', '\a', '&', '\x1C8', '\n', 
		'&', '\f', '&', '\xE', '&', '\x1CB', '\v', '&', '\x3', '&', '\x3', '&', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x5', '(', '\x1D8', '\n', '(', 
		'\x3', ')', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', '-', 
		'\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', 
		'\x3', '-', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x1FB', '\n', '.', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x6', 
		'/', '\x203', '\n', '/', '\r', '/', '\xE', '/', '\x204', '\x3', '/', '\x3', 
		'/', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x20B', '\n', '\x30', 
		'\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x5', '\x31', 
		'\x216', '\n', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x35', '\x3', 
		'\x35', '\a', '\x35', '\x226', '\n', '\x35', '\f', '\x35', '\xE', '\x35', 
		'\x229', '\v', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x6', '\x36', '\x230', '\n', '\x36', '\r', '\x36', 
		'\xE', '\x36', '\x231', '\x3', '\x36', '\x2', '\xE', '\x4', '\x6', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\x37', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', 
		'\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', 
		'\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', '\x2', '\x6', '\a', 
		'\x2', '\x33', '\x33', '\x35', '\x35', '\x37', '\x37', ':', ':', '?', 
		'@', '\x3', '\x2', '\x45', 'O', '\b', '\x2', '\x4', '\b', '\x19', '\x19', 
		'\x1B', '\x1B', '\x1F', ' ', '\"', '\"', '%', '%', '\x3', '\x2', '\v', 
		'\f', '\x2', '\x246', '\x2', 's', '\x3', '\x2', '\x2', '\x2', '\x4', 'u', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x92', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\xAC', '\x3', '\x2', '\x2', '\x2', '\n', '\xAE', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xE', '\xB8', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\xC9', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\xD7', '\x3', '\x2', '\x2', '\x2', '\x14', '\xE5', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\xF9', '\x3', '\x2', '\x2', '\x2', '\x18', '\x107', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x128', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\x133', '\x3', '\x2', '\x2', '\x2', '\"', '\x13E', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x14B', '\x3', '\x2', '\x2', '\x2', 
		'&', '\x14D', '\x3', '\x2', '\x2', '\x2', '(', '\x14F', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x151', '\x3', '\x2', '\x2', '\x2', ',', '\x15F', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x161', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x32', '\x16C', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x171', '\x3', '\x2', '\x2', '\x2', '\x36', '\x17A', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x17C', '\x3', '\x2', '\x2', '\x2', 
		':', '\x182', '\x3', '\x2', '\x2', '\x2', '<', '\x18C', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x193', '\x3', '\x2', '\x2', '\x2', '@', '\x19B', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x19D', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x1B2', '\x3', '\x2', '\x2', '\x2', '\x46', '\x1B4', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x1C3', '\x3', '\x2', '\x2', '\x2', 'J', '\x1C5', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x1CE', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x1D1', '\x3', '\x2', '\x2', '\x2', 'P', '\x1D9', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x1DC', '\x3', '\x2', '\x2', '\x2', 'T', '\x1DF', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x1E7', '\x3', '\x2', '\x2', '\x2', 
		'X', '\x1E9', '\x3', '\x2', '\x2', '\x2', 'Z', '\x1FA', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x1FC', '\x3', '\x2', '\x2', '\x2', '^', '\x20A', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x215', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x217', '\x3', '\x2', '\x2', '\x2', '\x64', '\x21B', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x221', '\x3', '\x2', '\x2', '\x2', 'h', '\x223', 
		'\x3', '\x2', '\x2', '\x2', 'j', '\x22F', '\x3', '\x2', '\x2', '\x2', 
		'l', 't', '\a', 'T', '\x2', '\x2', 'm', 't', '\x5', 'h', '\x35', '\x2', 
		'n', 't', '\x5', '\x66', '\x34', '\x2', 'o', 'p', '\a', '\'', '\x2', '\x2', 
		'p', 'q', '\x5', '(', '\x15', '\x2', 'q', 'r', '\a', '(', '\x2', '\x2', 
		'r', 't', '\x3', '\x2', '\x2', '\x2', 's', 'l', '\x3', '\x2', '\x2', '\x2', 
		's', 'm', '\x3', '\x2', '\x2', '\x2', 's', 'n', '\x3', '\x2', '\x2', '\x2', 
		's', 'o', '\x3', '\x2', '\x2', '\x2', 't', '\x3', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'v', '\b', '\x3', '\x1', '\x2', 'v', 'w', '\x5', '\x2', '\x2', 
		'\x2', 'w', '\x8F', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\f', '\b', 
		'\x2', '\x2', 'y', 'z', '\a', ')', '\x2', '\x2', 'z', '{', '\x5', '(', 
		'\x15', '\x2', '{', '|', '\a', '*', '\x2', '\x2', '|', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '}', '~', '\f', '\a', '\x2', '\x2', '~', '\x80', 
		'\a', '\'', '\x2', '\x2', '\x7F', '\x81', '\x5', '\x6', '\x4', '\x2', 
		'\x80', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', 
		'\x2', '\x2', '\x81', '\x82', '\x3', '\x2', '\x2', '\x2', '\x82', '\x8E', 
		'\a', '(', '\x2', '\x2', '\x83', '\x84', '\f', '\x6', '\x2', '\x2', '\x84', 
		'\x85', '\a', 'S', '\x2', '\x2', '\x85', '\x8E', '\a', 'T', '\x2', '\x2', 
		'\x86', '\x87', '\f', '\x5', '\x2', '\x2', '\x87', '\x88', '\a', 'R', 
		'\x2', '\x2', '\x88', '\x8E', '\a', 'T', '\x2', '\x2', '\x89', '\x8A', 
		'\f', '\x4', '\x2', '\x2', '\x8A', '\x8E', '\a', '\x34', '\x2', '\x2', 
		'\x8B', '\x8C', '\f', '\x3', '\x2', '\x2', '\x8C', '\x8E', '\a', '\x36', 
		'\x2', '\x2', '\x8D', 'x', '\x3', '\x2', '\x2', '\x2', '\x8D', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x83', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x86', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x90', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\b', 
		'\x4', '\x1', '\x2', '\x93', '\x94', '\x5', '$', '\x13', '\x2', '\x94', 
		'\x9A', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\f', '\x3', '\x2', 
		'\x2', '\x96', '\x97', '\a', '\x44', '\x2', '\x2', '\x97', '\x99', '\x5', 
		'$', '\x13', '\x2', '\x98', '\x95', '\x3', '\x2', '\x2', '\x2', '\x99', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9B', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x9C', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9D', 
		'\xAD', '\x5', '\x4', '\x3', '\x2', '\x9E', '\x9F', '\a', '\x34', '\x2', 
		'\x2', '\x9F', '\xAD', '\x5', '\b', '\x5', '\x2', '\xA0', '\xA1', '\a', 
		'\x36', '\x2', '\x2', '\xA1', '\xAD', '\x5', '\b', '\x5', '\x2', '\xA2', 
		'\xA3', '\x5', '\n', '\x6', '\x2', '\xA3', '\xA4', '\x5', '\f', '\a', 
		'\x2', '\xA4', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\a', 
		'#', '\x2', '\x2', '\xA6', '\xAD', '\x5', '\b', '\x5', '\x2', '\xA7', 
		'\xA8', '\a', '#', '\x2', '\x2', '\xA8', '\xA9', '\a', '\'', '\x2', '\x2', 
		'\xA9', '\xAA', '\x5', ',', '\x17', '\x2', '\xAA', '\xAB', '\a', '(', 
		'\x2', '\x2', '\xAB', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAC', '\x9D', 
		'\x3', '\x2', '\x2', '\x2', '\xAC', '\x9E', '\x3', '\x2', '\x2', '\x2', 
		'\xAC', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xA2', '\x3', '\x2', 
		'\x2', '\x2', '\xAC', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xA7', 
		'\x3', '\x2', '\x2', '\x2', '\xAD', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\xAE', '\xAF', '\t', '\x2', '\x2', '\x2', '\xAF', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\xB1', '\a', '\'', '\x2', '\x2', '\xB1', '\xB2', 
		'\x5', ',', '\x17', '\x2', '\xB2', '\xB3', '\a', '(', '\x2', '\x2', '\xB3', 
		'\xB4', '\x5', '\f', '\a', '\x2', '\xB4', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xB7', '\x5', '\b', '\x5', '\x2', '\xB6', '\xB0', '\x3', 
		'\x2', '\x2', '\x2', '\xB6', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', '\b', '\b', '\x1', '\x2', 
		'\xB9', '\xBA', '\x5', '\f', '\a', '\x2', '\xBA', '\xC6', '\x3', '\x2', 
		'\x2', '\x2', '\xBB', '\xBC', '\f', '\x5', '\x2', '\x2', '\xBC', '\xBD', 
		'\a', '\x37', '\x2', '\x2', '\xBD', '\xC5', '\x5', '\f', '\a', '\x2', 
		'\xBE', '\xBF', '\f', '\x4', '\x2', '\x2', '\xBF', '\xC0', '\a', '\x38', 
		'\x2', '\x2', '\xC0', '\xC5', '\x5', '\f', '\a', '\x2', '\xC1', '\xC2', 
		'\f', '\x3', '\x2', '\x2', '\xC2', '\xC3', '\a', '\x39', '\x2', '\x2', 
		'\xC3', '\xC5', '\x5', '\f', '\a', '\x2', '\xC4', '\xBB', '\x3', '\x2', 
		'\x2', '\x2', '\xC4', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC1', 
		'\x3', '\x2', '\x2', '\x2', '\xC5', '\xC8', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\x3', '\x2', 
		'\x2', '\x2', '\xC7', '\xF', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC6', 
		'\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\b', '\t', '\x1', '\x2', 
		'\xCA', '\xCB', '\x5', '\xE', '\b', '\x2', '\xCB', '\xD4', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\xCD', '\f', '\x4', '\x2', '\x2', '\xCD', '\xCE', 
		'\a', '\x33', '\x2', '\x2', '\xCE', '\xD3', '\x5', '\xE', '\b', '\x2', 
		'\xCF', '\xD0', '\f', '\x3', '\x2', '\x2', '\xD0', '\xD1', '\a', '\x35', 
		'\x2', '\x2', '\xD1', '\xD3', '\x5', '\xE', '\b', '\x2', '\xD2', '\xCC', 
		'\x3', '\x2', '\x2', '\x2', '\xD2', '\xCF', '\x3', '\x2', '\x2', '\x2', 
		'\xD3', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD2', '\x3', '\x2', 
		'\x2', '\x2', '\xD4', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD5', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\xD6', '\xD4', '\x3', '\x2', '\x2', '\x2', 
		'\xD7', '\xD8', '\b', '\n', '\x1', '\x2', '\xD8', '\xD9', '\x5', '\x10', 
		'\t', '\x2', '\xD9', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDB', 
		'\f', '\x4', '\x2', '\x2', '\xDB', '\xDC', '\a', '\x31', '\x2', '\x2', 
		'\xDC', '\xE1', '\x5', '\x10', '\t', '\x2', '\xDD', '\xDE', '\f', '\x3', 
		'\x2', '\x2', '\xDE', '\xDF', '\a', '\x32', '\x2', '\x2', '\xDF', '\xE1', 
		'\x5', '\x10', '\t', '\x2', '\xE0', '\xDA', '\x3', '\x2', '\x2', '\x2', 
		'\xE0', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE4', '\x3', '\x2', 
		'\x2', '\x2', '\xE2', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', 
		'\x3', '\x2', '\x2', '\x2', '\xE3', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\xE4', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\b', '\v', 
		'\x1', '\x2', '\xE6', '\xE7', '\x5', '\x12', '\n', '\x2', '\xE7', '\xF6', 
		'\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\f', '\x6', '\x2', '\x2', 
		'\xE9', '\xEA', '\a', '-', '\x2', '\x2', '\xEA', '\xF5', '\x5', '\x12', 
		'\n', '\x2', '\xEB', '\xEC', '\f', '\x5', '\x2', '\x2', '\xEC', '\xED', 
		'\a', '/', '\x2', '\x2', '\xED', '\xF5', '\x5', '\x12', '\n', '\x2', '\xEE', 
		'\xEF', '\f', '\x4', '\x2', '\x2', '\xEF', '\xF0', '\a', '.', '\x2', '\x2', 
		'\xF0', '\xF5', '\x5', '\x12', '\n', '\x2', '\xF1', '\xF2', '\f', '\x3', 
		'\x2', '\x2', '\xF2', '\xF3', '\a', '\x30', '\x2', '\x2', '\xF3', '\xF5', 
		'\x5', '\x12', '\n', '\x2', '\xF4', '\xE8', '\x3', '\x2', '\x2', '\x2', 
		'\xF4', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xEE', '\x3', '\x2', 
		'\x2', '\x2', '\xF4', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF8', 
		'\x3', '\x2', '\x2', '\x2', '\xF6', '\xF4', '\x3', '\x2', '\x2', '\x2', 
		'\xF6', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF7', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\xF8', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', 
		'\b', '\f', '\x1', '\x2', '\xFA', '\xFB', '\x5', '\x14', '\v', '\x2', 
		'\xFB', '\x104', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFD', '\f', '\x4', 
		'\x2', '\x2', '\xFD', '\xFE', '\a', 'P', '\x2', '\x2', '\xFE', '\x103', 
		'\x5', '\x14', '\v', '\x2', '\xFF', '\x100', '\f', '\x3', '\x2', '\x2', 
		'\x100', '\x101', '\a', 'Q', '\x2', '\x2', '\x101', '\x103', '\x5', '\x14', 
		'\v', '\x2', '\x102', '\xFC', '\x3', '\x2', '\x2', '\x2', '\x102', '\xFF', 
		'\x3', '\x2', '\x2', '\x2', '\x103', '\x106', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\x102', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\x3', 
		'\x2', '\x2', '\x2', '\x105', '\x17', '\x3', '\x2', '\x2', '\x2', '\x106', 
		'\x104', '\x3', '\x2', '\x2', '\x2', '\x107', '\x108', '\b', '\r', '\x1', 
		'\x2', '\x108', '\x109', '\x5', '\x16', '\f', '\x2', '\x109', '\x10F', 
		'\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', '\f', '\x3', '\x2', '\x2', 
		'\x10B', '\x10C', '\a', ':', '\x2', '\x2', '\x10C', '\x10E', '\x5', '\x16', 
		'\f', '\x2', '\x10D', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x111', 
		'\x3', '\x2', '\x2', '\x2', '\x10F', '\x10D', '\x3', '\x2', '\x2', '\x2', 
		'\x10F', '\x110', '\x3', '\x2', '\x2', '\x2', '\x110', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x111', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x112', 
		'\x113', '\b', '\xE', '\x1', '\x2', '\x113', '\x114', '\x5', '\x18', '\r', 
		'\x2', '\x114', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x115', '\x116', 
		'\f', '\x3', '\x2', '\x2', '\x116', '\x117', '\a', '>', '\x2', '\x2', 
		'\x117', '\x119', '\x5', '\x18', '\r', '\x2', '\x118', '\x115', '\x3', 
		'\x2', '\x2', '\x2', '\x119', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11A', 
		'\x118', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', '\x3', '\x2', '\x2', 
		'\x2', '\x11B', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11A', 
		'\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', '\b', '\xF', '\x1', '\x2', 
		'\x11E', '\x11F', '\x5', '\x1A', '\xE', '\x2', '\x11F', '\x125', '\x3', 
		'\x2', '\x2', '\x2', '\x120', '\x121', '\f', '\x3', '\x2', '\x2', '\x121', 
		'\x122', '\a', ';', '\x2', '\x2', '\x122', '\x124', '\x5', '\x1A', '\xE', 
		'\x2', '\x123', '\x120', '\x3', '\x2', '\x2', '\x2', '\x124', '\x127', 
		'\x3', '\x2', '\x2', '\x2', '\x125', '\x123', '\x3', '\x2', '\x2', '\x2', 
		'\x125', '\x126', '\x3', '\x2', '\x2', '\x2', '\x126', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x127', '\x125', '\x3', '\x2', '\x2', '\x2', '\x128', 
		'\x129', '\b', '\x10', '\x1', '\x2', '\x129', '\x12A', '\x5', '\x1C', 
		'\xF', '\x2', '\x12A', '\x130', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', 
		'\f', '\x3', '\x2', '\x2', '\x12C', '\x12D', '\a', '<', '\x2', '\x2', 
		'\x12D', '\x12F', '\x5', '\x1C', '\xF', '\x2', '\x12E', '\x12B', '\x3', 
		'\x2', '\x2', '\x2', '\x12F', '\x132', '\x3', '\x2', '\x2', '\x2', '\x130', 
		'\x12E', '\x3', '\x2', '\x2', '\x2', '\x130', '\x131', '\x3', '\x2', '\x2', 
		'\x2', '\x131', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x132', '\x130', 
		'\x3', '\x2', '\x2', '\x2', '\x133', '\x134', '\b', '\x11', '\x1', '\x2', 
		'\x134', '\x135', '\x5', '\x1E', '\x10', '\x2', '\x135', '\x13B', '\x3', 
		'\x2', '\x2', '\x2', '\x136', '\x137', '\f', '\x3', '\x2', '\x2', '\x137', 
		'\x138', '\a', '=', '\x2', '\x2', '\x138', '\x13A', '\x5', '\x1E', '\x10', 
		'\x2', '\x139', '\x136', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13D', 
		'\x3', '\x2', '\x2', '\x2', '\x13B', '\x139', '\x3', '\x2', '\x2', '\x2', 
		'\x13B', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13C', '!', '\x3', '\x2', 
		'\x2', '\x2', '\x13D', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x144', 
		'\x5', ' ', '\x11', '\x2', '\x13F', '\x140', '\a', '\x41', '\x2', '\x2', 
		'\x140', '\x141', '\x5', '(', '\x15', '\x2', '\x141', '\x142', '\a', '\x42', 
		'\x2', '\x2', '\x142', '\x143', '\x5', '\"', '\x12', '\x2', '\x143', '\x145', 
		'\x3', '\x2', '\x2', '\x2', '\x144', '\x13F', '\x3', '\x2', '\x2', '\x2', 
		'\x144', '\x145', '\x3', '\x2', '\x2', '\x2', '\x145', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x146', '\x14C', '\x5', '\"', '\x12', '\x2', '\x147', '\x148', 
		'\x5', '\b', '\x5', '\x2', '\x148', '\x149', '\x5', '&', '\x14', '\x2', 
		'\x149', '\x14A', '\x5', '$', '\x13', '\x2', '\x14A', '\x14C', '\x3', 
		'\x2', '\x2', '\x2', '\x14B', '\x146', '\x3', '\x2', '\x2', '\x2', '\x14B', 
		'\x147', '\x3', '\x2', '\x2', '\x2', '\x14C', '%', '\x3', '\x2', '\x2', 
		'\x2', '\x14D', '\x14E', '\t', '\x3', '\x2', '\x2', '\x14E', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x14F', '\x150', '\x5', '$', '\x13', '\x2', '\x150', 
		')', '\x3', '\x2', '\x2', '\x2', '\x151', '\x152', '\x5', '\"', '\x12', 
		'\x2', '\x152', '+', '\x3', '\x2', '\x2', '\x2', '\x153', '\x155', '\a', 
		'T', '\x2', '\x2', '\x154', '\x156', '\x5', '\x34', '\x1B', '\x2', '\x155', 
		'\x154', '\x3', '\x2', '\x2', '\x2', '\x155', '\x156', '\x3', '\x2', '\x2', 
		'\x2', '\x156', '\x160', '\x3', '\x2', '\x2', '\x2', '\x157', '\x159', 
		'\x5', '.', '\x18', '\x2', '\x158', '\x15A', '\x5', '\x34', '\x1B', '\x2', 
		'\x159', '\x158', '\x3', '\x2', '\x2', '\x2', '\x159', '\x15A', '\x3', 
		'\x2', '\x2', '\x2', '\x15A', '\x160', '\x3', '\x2', '\x2', '\x2', '\x15B', 
		'\x15D', '\x5', '\x32', '\x1A', '\x2', '\x15C', '\x15E', '\x5', '\x34', 
		'\x1B', '\x2', '\x15D', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x15D', 
		'\x15E', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x160', '\x3', '\x2', '\x2', 
		'\x2', '\x15F', '\x153', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x157', 
		'\x3', '\x2', '\x2', '\x2', '\x15F', '\x15B', '\x3', '\x2', '\x2', '\x2', 
		'\x160', '-', '\x3', '\x2', '\x2', '\x2', '\x161', '\x162', '\a', '\x3', 
		'\x2', '\x2', '\x162', '\x163', '\x5', '\x30', '\x19', '\x2', '\x163', 
		'\x164', '\a', '/', '\x2', '\x2', '\x164', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x165', '\x16B', '\x5', ',', '\x17', '\x2', '\x166', '\x167', '\x5', 
		',', '\x17', '\x2', '\x167', '\x168', '\a', '\x44', '\x2', '\x2', '\x168', 
		'\x169', '\x5', '\x30', '\x19', '\x2', '\x169', '\x16B', '\x3', '\x2', 
		'\x2', '\x2', '\x16A', '\x165', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x166', 
		'\x3', '\x2', '\x2', '\x2', '\x16B', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x16C', '\x16D', '\t', '\x4', '\x2', '\x2', '\x16D', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x16E', '\x172', '\a', '\x37', '\x2', '\x2', '\x16F', '\x170', 
		'\a', '\x37', '\x2', '\x2', '\x170', '\x172', '\x5', '\x34', '\x1B', '\x2', 
		'\x171', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x171', '\x16F', '\x3', 
		'\x2', '\x2', '\x2', '\x172', '\x35', '\x3', '\x2', '\x2', '\x2', '\x173', 
		'\x174', '\x5', ',', '\x17', '\x2', '\x174', '\x175', '\a', 'T', '\x2', 
		'\x2', '\x175', '\x176', '\a', '\x43', '\x2', '\x2', '\x176', '\x17B', 
		'\x3', '\x2', '\x2', '\x2', '\x177', '\x178', '\x5', '\x38', '\x1D', '\x2', 
		'\x178', '\x179', '\a', '\x43', '\x2', '\x2', '\x179', '\x17B', '\x3', 
		'\x2', '\x2', '\x2', '\x17A', '\x173', '\x3', '\x2', '\x2', '\x2', '\x17A', 
		'\x177', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x17C', '\x17D', '\x5', ',', '\x17', '\x2', '\x17D', '\x17E', 
		'\a', 'T', '\x2', '\x2', '\x17E', '\x17F', '\a', '\x45', '\x2', '\x2', 
		'\x17F', '\x180', '\x5', '(', '\x15', '\x2', '\x180', '\x181', '\a', '\x43', 
		'\x2', '\x2', '\x181', '\x39', '\x3', '\x2', '\x2', '\x2', '\x182', '\x183', 
		'\a', '$', '\x2', '\x2', '\x183', '\x184', '\a', 'T', '\x2', '\x2', '\x184', 
		'\x186', '\a', '+', '\x2', '\x2', '\x185', '\x187', '\x5', '<', '\x1F', 
		'\x2', '\x186', '\x185', '\x3', '\x2', '\x2', '\x2', '\x187', '\x188', 
		'\x3', '\x2', '\x2', '\x2', '\x188', '\x186', '\x3', '\x2', '\x2', '\x2', 
		'\x188', '\x189', '\x3', '\x2', '\x2', '\x2', '\x189', '\x18A', '\x3', 
		'\x2', '\x2', '\x2', '\x18A', '\x18B', '\a', ',', '\x2', '\x2', '\x18B', 
		';', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x18D', '\x5', ',', '\x17', 
		'\x2', '\x18D', '\x18F', '\a', 'T', '\x2', '\x2', '\x18E', '\x190', '\x5', 
		'>', ' ', '\x2', '\x18F', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x18F', 
		'\x190', '\x3', '\x2', '\x2', '\x2', '\x190', '\x191', '\x3', '\x2', '\x2', 
		'\x2', '\x191', '\x192', '\a', '\x43', '\x2', '\x2', '\x192', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x193', '\x194', '\a', ')', '\x2', '\x2', '\x194', 
		'\x195', '\a', '\v', '\x2', '\x2', '\x195', '\x196', '\a', '*', '\x2', 
		'\x2', '\x196', '?', '\x3', '\x2', '\x2', '\x2', '\x197', '\x198', '\a', 
		'\x1C', '\x2', '\x2', '\x198', '\x19C', '\x5', '\x36', '\x1C', '\x2', 
		'\x199', '\x19A', '\a', '\x1C', '\x2', '\x2', '\x19A', '\x19C', '\x5', 
		'\x38', '\x1D', '\x2', '\x19B', '\x197', '\x3', '\x2', '\x2', '\x2', '\x19B', 
		'\x199', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x19D', '\x19E', '\x5', ',', '\x17', '\x2', '\x19E', '\x19F', 
		'\a', 'T', '\x2', '\x2', '\x19F', '\x1A1', '\a', '\'', '\x2', '\x2', '\x1A0', 
		'\x1A2', '\x5', '\x44', '#', '\x2', '\x1A1', '\x1A0', '\x3', '\x2', '\x2', 
		'\x2', '\x1A1', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A3', 
		'\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A4', '\a', '(', '\x2', '\x2', 
		'\x1A4', '\x1A8', '\a', '+', '\x2', '\x2', '\x1A5', '\x1A7', '\x5', 'H', 
		'%', '\x2', '\x1A6', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1AA', 
		'\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A6', '\x3', '\x2', '\x2', '\x2', 
		'\x1A8', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1AB', '\x3', 
		'\x2', '\x2', '\x2', '\x1AA', '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1AB', 
		'\x1AC', '\a', ',', '\x2', '\x2', '\x1AC', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x1AD', '\x1B3', '\x5', '\x46', '$', '\x2', '\x1AE', '\x1AF', 
		'\x5', '\x46', '$', '\x2', '\x1AF', '\x1B0', '\a', '\x44', '\x2', '\x2', 
		'\x1B0', '\x1B1', '\x5', '\x44', '#', '\x2', '\x1B1', '\x1B3', '\x3', 
		'\x2', '\x2', '\x2', '\x1B2', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1B2', 
		'\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x1B4', '\x1B5', '\x5', ',', '\x17', '\x2', '\x1B5', '\x1B6', 
		'\a', 'T', '\x2', '\x2', '\x1B6', 'G', '\x3', '\x2', '\x2', '\x2', '\x1B7', 
		'\x1C4', '\x5', 'J', '&', '\x2', '\x1B8', '\x1C4', '\x5', 'L', '\'', '\x2', 
		'\x1B9', '\x1C4', '\x5', 'N', '(', '\x2', '\x1BA', '\x1C4', '\x5', 'P', 
		')', '\x2', '\x1BB', '\x1C4', '\x5', 'T', '+', '\x2', '\x1BC', '\x1C4', 
		'\x5', 'V', ',', '\x2', '\x1BD', '\x1C4', '\x5', 'X', '-', '\x2', '\x1BE', 
		'\x1C4', '\x5', 'Z', '.', '\x2', '\x1BF', '\x1C4', '\x5', '\\', '/', '\x2', 
		'\x1C0', '\x1C4', '\x5', '\x36', '\x1C', '\x2', '\x1C1', '\x1C4', '\x5', 
		'\x38', '\x1D', '\x2', '\x1C2', '\x1C4', '\x5', '\x64', '\x33', '\x2', 
		'\x1C3', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1B8', '\x3', 
		'\x2', '\x2', '\x2', '\x1C3', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1C3', 
		'\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1BB', '\x3', '\x2', '\x2', 
		'\x2', '\x1C3', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1BD', 
		'\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1BE', '\x3', '\x2', '\x2', '\x2', 
		'\x1C3', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C0', '\x3', 
		'\x2', '\x2', '\x2', '\x1C3', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1C3', 
		'\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C4', 'I', '\x3', '\x2', '\x2', 
		'\x2', '\x1C5', '\x1C9', '\a', '+', '\x2', '\x2', '\x1C6', '\x1C8', '\x5', 
		'H', '%', '\x2', '\x1C7', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1C8', 
		'\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1C7', '\x3', '\x2', '\x2', 
		'\x2', '\x1C9', '\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1CC', 
		'\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1C9', '\x3', '\x2', '\x2', '\x2', 
		'\x1CC', '\x1CD', '\a', ',', '\x2', '\x2', '\x1CD', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x1CE', '\x1CF', '\a', '\x14', '\x2', '\x2', '\x1CF', '\x1D0', 
		'\a', '\x43', '\x2', '\x2', '\x1D0', 'M', '\x3', '\x2', '\x2', '\x2', 
		'\x1D1', '\x1D2', '\a', '\x1E', '\x2', '\x2', '\x1D2', '\x1D3', '\a', 
		'\'', '\x2', '\x2', '\x1D3', '\x1D4', '\x5', '(', '\x15', '\x2', '\x1D4', 
		'\x1D5', '\a', '(', '\x2', '\x2', '\x1D5', '\x1D7', '\x5', 'H', '%', '\x2', 
		'\x1D6', '\x1D8', '\x5', 'R', '*', '\x2', '\x1D7', '\x1D6', '\x3', '\x2', 
		'\x2', '\x2', '\x1D7', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1D8', 'O', 
		'\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1DA', '\a', '\x16', '\x2', '\x2', 
		'\x1DA', '\x1DB', '\a', '\x43', '\x2', '\x2', '\x1DB', 'Q', '\x3', '\x2', 
		'\x2', '\x2', '\x1DC', '\x1DD', '\a', '\x1A', '\x2', '\x2', '\x1DD', '\x1DE', 
		'\x5', 'H', '%', '\x2', '\x1DE', 'S', '\x3', '\x2', '\x2', '\x2', '\x1DF', 
		'\x1E0', '\a', '\x18', '\x2', '\x2', '\x1E0', '\x1E1', '\x5', 'H', '%', 
		'\x2', '\x1E1', '\x1E2', '\a', '&', '\x2', '\x2', '\x1E2', '\x1E3', '\a', 
		'\'', '\x2', '\x2', '\x1E3', '\x1E4', '\x5', '(', '\x15', '\x2', '\x1E4', 
		'\x1E5', '\a', '(', '\x2', '\x2', '\x1E5', '\x1E6', '\a', '\x43', '\x2', 
		'\x2', '\x1E6', 'U', '\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1E8', '\x5', 
		'(', '\x15', '\x2', '\x1E8', 'W', '\x3', '\x2', '\x2', '\x2', '\x1E9', 
		'\x1EA', '\a', '\x1D', '\x2', '\x2', '\x1EA', '\x1EB', '\a', '\'', '\x2', 
		'\x2', '\x1EB', '\x1EC', '\x5', '(', '\x15', '\x2', '\x1EC', '\x1ED', 
		'\a', '\x43', '\x2', '\x2', '\x1ED', '\x1EE', '\x5', '(', '\x15', '\x2', 
		'\x1EE', '\x1EF', '\a', '\x43', '\x2', '\x2', '\x1EF', '\x1F0', '\x5', 
		'(', '\x15', '\x2', '\x1F0', '\x1F1', '\a', '\x43', '\x2', '\x2', '\x1F1', 
		'\x1F2', '\a', '(', '\x2', '\x2', '\x1F2', '\x1F3', '\x5', 'H', '%', '\x2', 
		'\x1F3', 'Y', '\x3', '\x2', '\x2', '\x2', '\x1F4', '\x1F5', '\a', '!', 
		'\x2', '\x2', '\x1F5', '\x1FB', '\a', '\x43', '\x2', '\x2', '\x1F6', '\x1F7', 
		'\a', '!', '\x2', '\x2', '\x1F7', '\x1F8', '\x5', '(', '\x15', '\x2', 
		'\x1F8', '\x1F9', '\a', '\x43', '\x2', '\x2', '\x1F9', '\x1FB', '\x3', 
		'\x2', '\x2', '\x2', '\x1FA', '\x1F4', '\x3', '\x2', '\x2', '\x2', '\x1FA', 
		'\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1FB', '[', '\x3', '\x2', '\x2', 
		'\x2', '\x1FC', '\x1FD', '\a', '\t', '\x2', '\x2', '\x1FD', '\x1FE', '\a', 
		'\'', '\x2', '\x2', '\x1FE', '\x1FF', '\x5', '(', '\x15', '\x2', '\x1FF', 
		'\x200', '\a', '(', '\x2', '\x2', '\x200', '\x202', '\a', '+', '\x2', 
		'\x2', '\x201', '\x203', '\x5', '^', '\x30', '\x2', '\x202', '\x201', 
		'\x3', '\x2', '\x2', '\x2', '\x203', '\x204', '\x3', '\x2', '\x2', '\x2', 
		'\x204', '\x202', '\x3', '\x2', '\x2', '\x2', '\x204', '\x205', '\x3', 
		'\x2', '\x2', '\x2', '\x205', '\x206', '\x3', '\x2', '\x2', '\x2', '\x206', 
		'\x207', '\a', ',', '\x2', '\x2', '\x207', ']', '\x3', '\x2', '\x2', '\x2', 
		'\x208', '\x20B', '\x5', '`', '\x31', '\x2', '\x209', '\x20B', '\x5', 
		'\x62', '\x32', '\x2', '\x20A', '\x208', '\x3', '\x2', '\x2', '\x2', '\x20A', 
		'\x209', '\x3', '\x2', '\x2', '\x2', '\x20B', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x20C', '\x20D', '\a', '\x15', '\x2', '\x2', '\x20D', '\x20E', 
		'\a', '\v', '\x2', '\x2', '\x20E', '\x20F', '\a', '\x42', '\x2', '\x2', 
		'\x20F', '\x216', '\x5', 'H', '%', '\x2', '\x210', '\x211', '\a', '\x15', 
		'\x2', '\x2', '\x211', '\x212', '\x5', 'h', '\x35', '\x2', '\x212', '\x213', 
		'\a', '\x42', '\x2', '\x2', '\x213', '\x214', '\x5', 'H', '%', '\x2', 
		'\x214', '\x216', '\x3', '\x2', '\x2', '\x2', '\x215', '\x20C', '\x3', 
		'\x2', '\x2', '\x2', '\x215', '\x210', '\x3', '\x2', '\x2', '\x2', '\x216', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x217', '\x218', '\a', '\x17', '\x2', 
		'\x2', '\x218', '\x219', '\a', '\x42', '\x2', '\x2', '\x219', '\x21A', 
		'\x5', 'H', '%', '\x2', '\x21A', '\x63', '\x3', '\x2', '\x2', '\x2', '\x21B', 
		'\x21C', '\a', '&', '\x2', '\x2', '\x21C', '\x21D', '\a', '\'', '\x2', 
		'\x2', '\x21D', '\x21E', '\x5', '(', '\x15', '\x2', '\x21E', '\x21F', 
		'\a', '(', '\x2', '\x2', '\x21F', '\x220', '\x5', 'H', '%', '\x2', '\x220', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x221', '\x222', '\t', '\x5', '\x2', 
		'\x2', '\x222', 'g', '\x3', '\x2', '\x2', '\x2', '\x223', '\x227', '\a', 
		'\n', '\x2', '\x2', '\x224', '\x226', '\a', '\xF', '\x2', '\x2', '\x225', 
		'\x224', '\x3', '\x2', '\x2', '\x2', '\x226', '\x229', '\x3', '\x2', '\x2', 
		'\x2', '\x227', '\x225', '\x3', '\x2', '\x2', '\x2', '\x227', '\x228', 
		'\x3', '\x2', '\x2', '\x2', '\x228', '\x22A', '\x3', '\x2', '\x2', '\x2', 
		'\x229', '\x227', '\x3', '\x2', '\x2', '\x2', '\x22A', '\x22B', '\a', 
		'\n', '\x2', '\x2', '\x22B', 'i', '\x3', '\x2', '\x2', '\x2', '\x22C', 
		'\x230', '\x5', ':', '\x1E', '\x2', '\x22D', '\x230', '\x5', '@', '!', 
		'\x2', '\x22E', '\x230', '\x5', '\x42', '\"', '\x2', '\x22F', '\x22C', 
		'\x3', '\x2', '\x2', '\x2', '\x22F', '\x22D', '\x3', '\x2', '\x2', '\x2', 
		'\x22F', '\x22E', '\x3', '\x2', '\x2', '\x2', '\x230', '\x231', '\x3', 
		'\x2', '\x2', '\x2', '\x231', '\x22F', '\x3', '\x2', '\x2', '\x2', '\x231', 
		'\x232', '\x3', '\x2', '\x2', '\x2', '\x232', 'k', '\x3', '\x2', '\x2', 
		'\x2', '\x31', 's', '\x80', '\x8D', '\x8F', '\x9A', '\xAC', '\xB6', '\xC4', 
		'\xC6', '\xD2', '\xD4', '\xE0', '\xE2', '\xF4', '\xF6', '\x102', '\x104', 
		'\x10F', '\x11A', '\x125', '\x130', '\x13B', '\x144', '\x14B', '\x155', 
		'\x159', '\x15D', '\x15F', '\x16A', '\x171', '\x17A', '\x188', '\x18F', 
		'\x19B', '\x1A1', '\x1A8', '\x1B2', '\x1C3', '\x1C9', '\x1D7', '\x1FA', 
		'\x204', '\x20A', '\x215', '\x227', '\x22F', '\x231',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
