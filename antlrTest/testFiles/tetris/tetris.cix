// Implementation of Tetris on Cix
// Uses the VGA-mode memory mapped monitor

// NOTE: this code file and all others in this folder
// are currently just for testing the Cix compiler
// it doesn't actually work yet

// VGA monitor is 640x480 at 8bpp
// Color mode is RGB 3:3:2
// Uses 307,200 bytes (base to 0x49FFF)

/*
 * Tetris: A block-stacking game. Tetriminoes, made of four squares connected
 * on their edges, fall from the top of the board. Rotate and drop them to
 * fill and clear lines. The more lines you clear at once, the more points
 * you get!
 *
 */

global void** doublePointer;

global void* vgaBase;

// #define COLOR_CYAN 0x03 // I
// #define COLOR_YELLOW 0xFC // O
// #define COLOR_BLUE 0x1C // J
// #define COLOR_ORANGE 0xE8 // L
// #define COLOR_GREEN 0x1C // S
// #define COLOR_RED 0xE0 // Z
// #define COLOR_PURPLE 0xE3 // T
// 
// #include <cixlib.cix>
// #include <vga_text.cix>
// #include <game_input.cix>
// #include <random.cix>

struct Board
{
	byte* Cells;	// address of 0,0
	int Width;
	int Height;
}

struct Tetrimino
{
	byte Color;
	int XO; int YO;
	int X1; int Y1;
	int X2; int Y2;
	int X3; int Y3;
}

struct Game
{
	Board* Board;
	Tetrimino* DropPiece;
	Tetrimino* HoldPiece;
	Tetrimino* NextPiece;
	int DropRatePerSecond;
	int[5] ArrayMember;
	int offsetCounter;
}

global Game* game;
// global int[5] globalArray;

int Main(int argc, byte** argv)
{
	// Find the VGA monitor's address
	vgaBase = (void*)hwcall("System::GetMemoryMappedHWStartAddress", "VGAMonitor");

	// Initialize the RNG
	RNGInit();
	
	// Fill the tetrimino creation functions
	tetriminoFunctions[0] = &CreateI;
	tetriminoFunctions[1] = &CreateO;
	tetriminoFunctions[2] = &CreateJ;
	tetriminoFunctions[3] = &CreateL;
	tetriminoFunctions[4] = &CreateS;
	tetriminoFunctions[5] = &CreateZ;
	tetriminoFunctions[6] = &CreateT;

	// Register the game loop to be called
	hwcall("Timer::CallOnLoop", 0.033f, &Update);

	// Create the game and initialize it
	game = malloc(sizeof(Game));
	game.Board = malloc(sizeof(Board));

	game.Board.Width = 12;
	game.Board.Height = 20;
	game.Board.Cells = malloc(12 * 20);
}

Tetrimino* CreateI()
{
	Tetrimino* result = malloc(sizeof(Tetrimino));
	result.Color = COLOR_CYAN;
	result.XO = 0; result.YO = 0;
	result.X1 = -1; result.Y1 = 0;
	result.X2 = 1; result.Y2 = 0;
	result.X3 = 2; result.Y2 = 0;
}

Tetrimino* CreateO()
{
	Tetrimino* result = malloc(sizeof(Tetrimino));
	result.Color = COLOR_YELLOW;
	result.XO = 0; result.YO = 0;
	result.X1 = 1; result.Y1 = 0;
	result.X2 = 0; result.Y2 = 1;
	result.X3 = 1; result.Y2 = 1;
}

Tetrimino* CreateJ()
{
	Tetrimino* result = malloc(sizeof(Tetrimino));
	result.Color = COLOR_BLUE;
	result.XO = 0; result.YO = 0;
	result.X1 = 0; result.Y1 = -1;
	result.X2 = 0; result.Y2 = -2;
	result.X3 = -1; result.Y2 = 0;
}

Tetrimino* CreateL()
{
	Tetrimino* result = malloc(sizeof(Tetrimino));
	result.Color = COLOR_ORANGE;
	result.XO = 0; result.YO = 0;
	result.X1 = 0; result.Y1 = -1;
	result.X2 = 0; result.Y2 = -2;
	result.X3 = 1; result.Y2 = 0;
}

Tetrimino* CreateS()
{
	Tetrimino* result = malloc(sizeof(Tetrimino));
	result.Color = COLOR_GREEN;
	result.XO = 0; result.YO = 0;
	result.X1 = 1; result.Y1 = 0;
	result.X2 = 1; result.Y2 = -1;
	result.X3 = 2; result.Y2 = -1;
}

Tetrimino* CreateT()
{
	Tetrimino* result = malloc(sizeof(Tetrimino));
	result.Color = COLOR_PURPLE;
	result.XO = 0; result.YO = 0;
	result.X1 = -1; result.Y1 = 0;
	result.X2 = 1; result.Y2 = 0;
	result.X3 = 0; result.Y2 = 1;
	return result;
}

Tetrimino* CreateZ()
{
	Tetrimino* result = malloc(sizeof(Tetrimino));
	result.Color = COLOR_RED;
	result.XO = 0; result.YO = 0;
	result.X1 = -1; result.Y1 = 0;
	result.X2 = 0; result.Y2 = -1;
	result.X3 = 1; result.Y2 = -1;

	return result;
}

global @funcptr<Tetrimino*>* tetriminoFunctions;
global @funcptr<int, byte*, short, long**, ulong, float***, double, void****> lotsOPointers;

Tetrimino* RandomTetrimino()
{
	int next = randomInt(0, 6);
	return tetriminoFunctions[next]();
}