Cix: Abstract Syntax Tree Parsing and Elements

DataType: Represents the type of a value, structure member, or function variable.
	string Name
	int pointerLevel
Element: An element of the AST tree. Implemented as a memberless abstract class from which all element classes derive.
	Value: A constant value, or expression that evaluates to a single value.
		DataType Type
	ExpressionElement: Any of the below.
		Constant: A value containing an instance of a type. The value itself is defined as a byte array, allowing the storage of fundamental types, length-prefixed strings, and struct instances.
		Operator: A unary, binary, or ternary operator that performs operations on values.
		MemberAccess: Direct access to a named variable in the current scope of execution.
		FunctionCall: A call to a named function consisting of zero or more arguments, each argument being a constant or expression.
			FunctionParameter: The value for an argument in a function call; contains an expression that contains either a single constant or a full set of expression elements.
		ArrayMemberAccess: An access to an element in a named array. The member to access is indicated by an index that is either a numeric constant value or an expression. 
	Expression: A list of expression elements sorted in postfix form.
	FunctionDeclaration: Declares a function with a return type, name, list of arguments, and list of statements.
		FunctionArgument: One of the arguments of a function with a type and name.
		VariableLengthArgument: Found at the end of a list of arguments, this element indicates that the function accepts any further amount of arguments.
	StructDeclaration: Declares a structure with a name.
		StructMemberDeclaration: Declares the member of a structure with a type and name.
	VariableDeclaration: A type and name used to declare a variable in a function.
	VariableDeclarationWithInitialization: A VariableDeclaration element and an Expression that results in the type of variable. The assignment operator is inferred.
	ConditionalBlock: A list of one or more of the elements below:
		IfBlock: A conditional expression and a list of statements within the block.
		ElseIfBlock: A conditional expression that must follow after the first IfBlock and a list of statements within the block.
		ElseBlock: A list of statements that must follow after any IfBlocks and ElseIfBlocks.
	SwitchBlock: A variable or conditional expression, followed by a list of cases.
		SwitchCase: A constant or char/string literal and a list of statements.
	LoopFor: A initializer (expression in the form of <variable> = <expression> or VariableDeclarationWithInitialization), a conditional (expression evaluating to a boolean number), an afterthought (any statement), and a list of statements to execute.
	LoopWhile: A conditional expression and a list of statements to execute while the condition does not evaluate to zero.
	LoopDoWhile: Same structure as above, but compiled differently.
	Break: A break statement for loops and switch blocks.
	Continue: A continue statement for loops and switch blocks.
	Return: A return statement out of void-returning functions.
	ReturnValue: A constant, literal, or expression to return out of a function.

Statements are groups of elements. Statements are separated by semicolons, and lists of statements are held within openscopes and closescopes.