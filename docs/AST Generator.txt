AST Generation:

The Abstract Syntax Tree describes the structure of a valid Cix program after comment removal, preprocessing, lexing, and tokenizing. The AST generator transforms a sequence of tokens into a tree composed of AST elements that represents the program.

The AST generator is a two-pass process. The first pass wholly defines structures and their members, as well as function definitions (name, return type, and arguments). The second pass enters function bodies and generates the tree from their internals.

The first pass is primarily to resolve names without them having to be defined before their first usage. This rule applies partially in the first pass as well, allowing structure members and function definitions to use types that aren't defined until deeper in the file. To accomplish this, the first pass generator will mark as-of-yet unknown data types as "unresolved", and it keeps track of all unresolved type names in order to resolve them when they appear later in the file.

The steps for a first pass AST generation are as follows:
	1. A token may be either a KeyStruct or any identifier. If it's an identifier, and the identifier does not map to a type, assign it to the unresolved type names list.
	2. If it's KeyStruct,
		a. Read the next token, expecting an identifier. This identifier is the structure name.
		b. Read the next token, expecting an openscope.
		c. Structures must contain at least one structure member. Read a token, expecting an identifier (follow unresolved rules). If the identifier has one or more asterisks, set it up as a pointer type.
		d. Read a token, expecting an identifier. This is the member's name.
		e. Read a token. If it's a semicolon, go to step 2a. If it's an OpenBracket, this member defines an array of values.
			i. Read all tokens until we reach a CloseBracket.
			ii. Send it to the expression evaluator, evaluate it down, and use the final number as the array size.
			iii. Read a token, expecting a semicolon. Return to step 2a.
	3. If it's 