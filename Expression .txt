Input: List<Token>

public static List<ExpressionElement> ToElement(IEnumerable<Token> token, Dictionary<string, Element> nameTable)
	For each token in tokens,
		1. Switch on the token's type.
			case Identifier (including type keywords):
				1. If the identifier is a numeric literal, create a ExpressionConstant from the value
				2. If the identifier is a normal identifier,
					a. If the identifier is a known type name && there's a previous token that's a leftparen && there's a next token that's a rightparen, create an ExpressionTypeCast with the given name.
					b. If the identifier is a known local variable, create an ExpressionMemberAccess with the identifier.
					c. If the identifier is a known function name,
						i. Get the next token, expecting a left parentheses.
						ii. Read tokens into a separate list until we reach a right parentheses.
						iii. Split this list on Comma-type tokens.
						iv. Submit each list to the Expression parser to get the postfix notation for each argument
						v. For each list, create an ExpressionFunctionParameter with the proper data type and expression.
						vi. Package these into a single ExpressionFunctionCall with the proper arguments.
			case OpenParen:
			case CloseParen:
				Create an ExpressionParentheses with the proper type.
			case OpenBracket:
				If we find an open bracket,
					a. Take every token from the open bracket to the close bracket exclusive.
					b. Call the function mapping a List<Token> to a List<ExpressionElements> on these tokens
					c. Store the result as an ExpressionElement
			case CloseBracket:
				Syntax error.
			case Operator:
				Convert it into an ExpressionOperator with a proper type.
			case Indeterminate:
				1. If there is a token before this one,
					a. If the token is an identifier,
						i. If the identifier is a type in the name table,
							1. Load the previously generated expression element.
							2. Set its PointerLevel to 1.
							3. Continue to the next token.
						ii. Else,
							1. Create an ExpressionOperator with the operator of Multiply.
					b. Else, syntax error (mostly because OpPointerDereference can be unambiguously identified)
				2. Else, syntax error (for same reason).
			default:
				1. This is not an expression element. Syntax error.
		2. Return the list of ExpressionElements to the caller.
	
Append a list of parenthetical levels to a list of ExpressionElements.
public static List<Tuple<ExpressionElement, int>> GetParentheticalLevel(IEnumerable<ExpressionElement> elements)
	1. Create a result list and a current parenthetical level = 0.
	2. For each element in elements,
		a. If the element is a leftparen, increment the parenthetical level by 1 and create a Tuple<element, level>.
		b. If the element is a rightparen, decrement the parenthetical level by 1 and create a Tuple<element, level>/
		c. Else, create a Tuple<element, level>
	3. If the level is not zero by the end of the token list, throw.
	4. Return the list.P

Converting an infix-style expression into a block of known lvalue and rvalue subexpressions
public static List<ExpressionElement> ToSubexpressions(IEnumerable<ExpressionElement> elements)
	1. If the list does not contain any OpAssignments (or derivatives) or OpPreincrement/OpPredecrement,
		a. Return the entire expression in a single node wrapped as an ExpressionRValue.
	2. If the list contains an OpAssignment (or derivatives),
		a. Create a List of elements for the lvalue and one for the Rvalue.
		b. Starting from the element before the OpAssignment element, work backwards, adding any element out of {identifier type, *, ., ->} to the beginning of the LValue list, stopping when any other element is found
		c. 